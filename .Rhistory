cors <- cor(mtcars)
cors[1,]
cors[1,]^2
cors[2,]^2
cors[3,]^2
cors[6,]^2
fitMLR2 <- lm(mpg ~ as.factor(am) + wt + hp, data = mtcars)
summary(fitMLR2)
library(MASS)
data("shuttle")
?shuttle
fit <- glm(shuttle$use ~ shuttle$wind, family = binomial)
summary(fit)
head(shuttle)
fit <- glm(shuttle$use ~ shuttle$wind, family = binomial)
tail(shuttle)
exp(fit$coefficients)
fit <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family = binomial)
summary(fit)
exp(fit$coefficients)
fit <- glm(shuttle$use ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm(1-shuttle$use ~ shuttle$wind, family = binomial)
?I
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-(shuttle$use+1)) ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-na.omit(shuttle$use)) ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm(as.numeric(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm((1-as.numeric(shuttle$use)) ~ shuttle$wind, family = binomial)
data("InsectSprays")
fit <- glm(InsectSprays$count ~ InsectSprays$spray, family = poisson)
exp(fit$coefficients)
fit$coefficients
fit1<- glm(1-use.binary~wind-1,data=shuttle,family=binomial)
summary(fit1)$coef
fit <- glm(InsectSprays$count ~ factor(InsectSprays$spray), family = poisson)
summary(fit)
exp(fit$coefficients)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x = x, y = y)
y2 <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
summary(lm(y2~x))
x2 <- 0:5
summary(lm(y2~x))
summary(lm(y2~x2))
y <- rpois(10, 10)
y
x <- seq(0:1, 10)
x <- seq(0,1, length = 10)
x
?seq
x <- seq(0,1, length = 10, by = 1)
x <- sample(0:1, 10, replace = T)
x
t <- log(10)
t2 <- log(10) + t
glm1 <- glm(y ~ x + offset(t), family = poisson)
time <- seq(1, 10)
time
glm1 <- glm(y ~ x + offset(log(time)), family = poisson)
summary(glm1)
glm2 <- glm(y ~ x + offset(log(10)+log(time)), family = poisson)
summary(glm2)
library(swirl)
swirl()
install_from_swirl("Regression Models")
library(swirl)
swirl()
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case, list = FALSE)
set.seed(125)
training <- <- segmentationOriginal[inTrain,]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(segmentationOriginal~., data = training, method = "rpart")
head(training)
names(training)
modFit <- train(Case~., data = training, method = "rpart")
pred <- predict(modFit,testing)
training[1,]
test1 <- training[1,]
test1 <- data.frame(training[1,])
test1
test1[1,] <- 0
test1
test1$TotalIntenCh2[1,] <- 23000
test1$TotalIntenCh2[1] <- 23000
test1$FiberWidthCh1[1] <- 10
test1$PerimStatusCh1[1] <- 2
predict(modFit, test1)
pred1 <- predict(modFit, test1)
pred1
modFit <- train(Class~., data = training, method = "rpart")
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
pred1 <- predict(modFit, test1)
pred1
pred2 <- pred1
test1$TotalIntenCh2[1] <- 50000
test1$FiberWidthCh1[1] <- 10
test1$VarIntenCh4 [1] <- 100
test1$PerimStatusCh1[1] <- 0
pred1 <- predict(modFit, test1)
pred1
test1$TotalIntenCh2[1] <- 57000
test1$VarIntenCh4 [1] <- 100
test1$PerimStatusCh1[1] <- 2
test1$FiberWidthCh1[1] <- 8
test1$TotalIntenCh2[1] <- 0
pred1 <- predict(modFit, test1)
pred1
test1[1,] <- 0
test2 <- test1
test3 <- test1
test4 <- test1
test5 <- test1
test2$TotalIntenCh2[1,] <- 23000
test2$TotalIntenCh2[1] <- 23000
test2$FiberWidthCh1[1] <- 10
test2$PerimStatusCh1[1] <- 2
predict(modFit, test2)
41-10^3
41*10^3
library(pgmm)
data(olive)
olive = olive[,-1]
clasTree <- train(Area ~., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(clasTree, newdata = newdata)
clasTree
fancyRpartPlot(clasTree$finalModel)
newdata
head(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd ~., method = "glm", family = "binomial", data = SAheart)
model <- train(chd ~chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = SAheart)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = SAheart)
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
model <- train(y ~ ., method = "rf", prox=TRUE)
model <- train(y ~ ., method = "rf", prox=TRUE, data = vowel.train)
?varImp
varImp(model)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("shiny")
install.packages("shiny")
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install_github('rCharts')
install.packages("rCharts")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
?uninstall
remove.packages("RCurl")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install.packages("devtools")
install.packages("Rcpp")
install_github('ramnathv/rCharts')
install.packages("RCurl")
install.packages("RCurl")
remove.packages(RCurl)
remove.packages("RCurl")
remove.packages("RCurl")
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
install.packages("downloader")
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
deps = c('RCurl', 'RJSONIO', 'whisker', 'yaml')
for (dep in deps){
install.packages(dep)
}
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
ftype(mean)
library(pryr)
install.packages("pryr")
ftype(mean)
library(pryr)
ftype(mean)
ftype(show)
ftype(predict)
ftype(colSums)
ftype(dgamma)
ftype(lm)
library(shiny)
runExample("01_hello")
source('E:/FAAS/AI/Data_Mining/DATA_Science_ESP/Playground/ui.R')
shinyServer()
setwd('E:/FAAS/AI/Data_Mining/DATA_Science_ESP/Playground/testApp')
runApp("testApp")
setwd('E:/FAAS/AI/Data_Mining/DATA_Science_ESP/Playground')
runApp("testApp")
runApp("testApp")
runApp("testApp")
devtools::install_github('rstudio/shinyapps')
install.packages("digest")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='francisco-alonso',
token='782554EFE63E5405993B9E6EA37D643A',
secret='<SECRET>')
shinyapps::setAccountInfo(name='francisco-alonso',
token='782554EFE63E5405993B9E6EA37D643A',
secret='IJqmRS99xXKSVcxrLydI7GjXpsOcHNQknut5BAZp')
library(shinyapps)
source('E:/FAAS/COMPUTACION POSTGRADO/Semestre_1/MD/tarea/app/ui.R')
shinyapps::deployApp('E:/FAAS/COMPUTACION POSTGRADO/Semestre_1/MD/tarea/app')
shinyapps::deployApp('E:/FAAS/COMPUTACION POSTGRADO/Semestre_1/MD/tarea/app')
shinyapps::deployApp('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/tarea/app')
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/newsCluster.R')
setwd('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015')
library(twitteR)
library(RCurl)
library(RJSONIO)
library(stringr)
library(tm)
library(wordcloud)
library(dplyr)
library(SnowballC)
library(cluster)
library(fpc)
library(topicmodels)
library(dplyr)
file1 <- read.csv("3_tweetsNoticierosLATAM.csv", stringsAsFactors = FALSE)
#   file2 <- read.csv("2_tweetsNoticieros2.csv", stringsAsFactors = FALSE)
#   file3 <- read.csv("2_tweetsNoticieros3.csv", stringsAsFactors = FALSE)
#   file4 <- read.csv("2_tweetsNoticieros4.csv", stringsAsFactors = FALSE)
allUserTweets <- rbind(file1)
allUserTweets <- select(allUserTweets, userNames, userTweets)
myStopwords <- c("que", "por", "los", "del", "para", "con", "las", "mas", "una", "como", "este", "sobre", "sus", "son",
"dos", "entre", "fue", "ser", "asi", "pero", "tras" ,
"ante", "desde", "tene", "todo", "tres", "nos", "sera", "esto", "han", "estos", "dias", "donde" ,
"muy", "estas", "sip", "cinco", "cuatro", "podria", "toda" ,
"tus", "cual", "mismo", "cada", "les", "eso", "sido", "hora", "siete", "ellos", "uno", "era", "seis" ,
"van", "the", "sabe" ,"sabes", "seg", "sino" ,
"todas",
"esta", "hoy", "sea", "fot", "gracias", "hasta", "algo", "hay", "quiere", "sin")
corpuses <- Corpus(VectorSource(allUserTweets$userTweets))
corpuses <- tm_map(corpuses, removeWords, myStopwords)
#allUserTweets$userTweets <- tm_map(allUserTweets$userTweets, content_transformer(tolower))
dtm <- DocumentTermMatrix(corpuses)
rownames(dtm) <- allUserTweets$userNames
dtm2 <- removeSparseTerms(dtm, sparse = 0.95)
m2 <- as.matrix(dtm2)
m3 <- t(m2)
> pam.2 <- pam(m3,k=2,diss = F)
> pam.3 <- pam(m3,k=3,diss = F)
> pam.4 <- pam(m3,k=4,diss = F)
> pam.5 <- pam(m3,k=5,diss = F)
> pam.6 <- pam(m3,k=6,diss = F)
> pam.7 <- pam(m3,k=7,diss = F)
> pam.8 <- pam(m3,k=8,diss = F)
> pam.9 <- pam(m3,k=9,diss = F)
> pam.10 <- pam(m3,k=10,diss = F)
> sil2 <- silhouette(pam.2)
> sil3 <- silhouette(pam.3)
> sil4 <- silhouette(pam.4)
> sil5 <- silhouette(pam.5)
> sil6 <- silhouette(pam.6)
> sil7 <- silhouette(pam.7)
> sil8 <- silhouette(pam.8)
> sil9 <- silhouette(pam.9)
> sil10 <- silhouette(pam.10)
pam.sil.values <- c(
summary(sil2)[["avg.width"]]
,summary(sil3)[["avg.width"]]
,summary(sil4)[["avg.width"]]
,summary(sil5)[["avg.width"]]
,summary(sil6)[["avg.width"]]
,summary(sil7)[["avg.width"]]
,summary(sil8)[["avg.width"]]
,summary(sil9)[["avg.width"]]
,summary(sil10)[["avg.width"]])
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/newsCluster.R')
pam.2 <- pam(m3,k=2,diss = F)
pam.3 <- pam(m3,k=3,diss = F)
pam.4 <- pam(m3,k=4,diss = F)
pam.5 <- pam(m3,k=5,diss = F)
pam.6 <- pam(m3,k=6,diss = F)
pam.7 <- pam(m3,k=7,diss = F)
pam.8 <- pam(m3,k=8,diss = F)
pam.9 <- pam(m3,k=9,diss = F)
pam.10 <- pam(m3,k=10,diss = F)
sil2 <- silhouette(pam.2)
sil3 <- silhouette(pam.3)
sil4 <- silhouette(pam.4)
sil5 <- silhouette(pam.5)
sil6 <- silhouette(pam.6)
sil7 <- silhouette(pam.7)
sil8 <- silhouette(pam.8)
sil9 <- silhouette(pam.9)
sil10 <- silhouette(pam.10)
pam.sil.values <- c(
summary(sil2)[["avg.width"]]
,summary(sil3)[["avg.width"]]
,summary(sil4)[["avg.width"]]
,summary(sil5)[["avg.width"]]
,summary(sil6)[["avg.width"]]
,summary(sil7)[["avg.width"]]
,summary(sil8)[["avg.width"]]
,summary(sil9)[["avg.width"]]
,summary(sil10)[["avg.width"]])
plot(2:10,pam.sil.values[2:10],type="o",col="blue",pch=0,ylim=c(0.3,0.65),xlab="Number of clusters",ylab="Silhouette")
plot(2:10,pam.sil.values[2:10],type="o",col="blue",pch=0,ylim=c(-0.05,0),xlab="Number of clusters",ylab="Silhouette")
plot(2:10,pam.sil.values[2:10],type="o",col="blue",pch=0,ylim=c(-0.05,0.05),xlab="Number of clusters",ylab="Silhouette")
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/newsCluster.R')
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/newsCluster.R')
hierarchical.clustering <- hclust(m3,method="average")
hierarchical.clustering <- hclust(dist(m3),method="average")
hclust.2 <- cutree(hierarchical.clustering,k=2)
hclust.3 <- cutree(hierarchical.clustering,k=3)
hclust.4 <- cutree(hierarchical.clustering,k=4)
hclust.5 <- cutree(hierarchical.clustering,k=5)
hclust.6 <- cutree(hierarchical.clustering,k=6)
hclust.7 <- cutree(hierarchical.clustering,k=7)
hclust.8 <- cutree(hierarchical.clustering,k=8)
hclust.9 <- cutree(hierarchical.clustering,k=9)
hclust.10 <- cutree(hierarchical.clustering,k=10)
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/newsCluster.R')
sil2 <- silhouette(hclust.2,dist=similarity.matrix)
sil3 <- silhouette(hclust.3,dist=similarity.matrix)
sil4 <- silhouette(hclust.4,dist=similarity.matrix)
sil5 <- silhouette(hclust.5,dist=similarity.matrix)
sil6 <- silhouette(hclust.6,dist=similarity.matrix)
sil7 <- silhouette(hclust.7,dist=similarity.matrix)
sil8 <- silhouette(hclust.8,dist=similarity.matrix)
sil9 <- silhouette(hclust.9,dist=similarity.matrix)
sil10 <- silhouette(hclust.10,dist=similarity.matrix)
similarity.matrix <- dist(m3)
sil2 <- silhouette(hclust.2,dist=similarity.matrix)
sil3 <- silhouette(hclust.3,dist=similarity.matrix)
sil4 <- silhouette(hclust.4,dist=similarity.matrix)
sil5 <- silhouette(hclust.5,dist=similarity.matrix)
sil6 <- silhouette(hclust.6,dist=similarity.matrix)
sil7 <- silhouette(hclust.7,dist=similarity.matrix)
sil8 <- silhouette(hclust.8,dist=similarity.matrix)
sil9 <- silhouette(hclust.9,dist=similarity.matrix)
sil10 <- silhouette(hclust.10,dist=similarity.matrix)
lines(2:10,hclust.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
hclust.sil.values <- c(
summary(sil2)[["avg.width"]]
,summary(sil3)[["avg.width"]]
,summary(sil4)[["avg.width"]]
,summary(sil5)[["avg.width"]]
,summary(sil6)[["avg.width"]]
,summary(sil7)[["avg.width"]]
,summary(sil8)[["avg.width"]]
,summary(sil9)[["avg.width"]]
,summary(sil10)[["avg.width"]])
lines(2:10,hclust.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
plot(2:10,pam.sil.values[2:10],type="o",col="blue",pch=0,ylim=c(-0.05,0.05),xlab="Number of clusters",ylab="Silhouette")
lines(2:10,hclust.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
hclust.sil.values
plot(2:10,pam.sil.values[2:10],type="o",col="blue",pch=0,ylim=c(-0.05,1),xlab="Number of clusters",ylab="Silhouette")
lines(2:10,hclust.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
kmeans.2 <- kmeans(m3, 2)
kmeans.3 <- kmeans(m3, 3)
kmeans.4 <- kmeans(m3, 4)
kmeans.5 <- kmeans(m3, 5)
kmeans.6 <- kmeans(m3, 6)
kmeans.7 <- kmeans(m3, 7)
kmeans.8 <- kmeans(m3, 8)
kmeans.9 <- kmeans(m3, 9)
kmeans.10 <- kmeans(m3, 10)
sil2 <- silhouette(kmeans.2)
sil3 <- silhouette(kmeans.3)
sil4 <- silhouette(kmeans.4)
sil5 <- silhouette(kmeans.5)
sil6 <- silhouette(kmeans.6)
sil7 <- silhouette(kmeans.7)
sil8 <- silhouette(kmeans.8)
sil9 <- silhouette(kmeans.9)
sil10 <- silhouette(kmeans.10)
pam.2
dissE <- daisy(m3)
sk <- silhouette(km$cl, dissE)
sk2 <- silhouette(kmeans.2, dissE)
sk2 <- silhouette(kmeans.2$cluster, dissE)
sil2 <- silhouette(kmeans.2$cluster)
sil3 <- silhouette(kmeans.3$cluster)
sil4 <- silhouette(kmeans.4$cluster)
sil5 <- silhouette(kmeans.5$cluster)
sil6 <- silhouette(kmeans.6$cluster)
sil7 <- silhouette(kmeans.7$cluster)
sil8 <- silhouette(kmeans.8$cluster)
sil9 <- silhouette(kmeans.9$cluster)
sil10 <- silhouette(kmeans.10$cluster)
sil2 <- silhouette(kmeans.2$cluster, dissE)
sil3 <- silhouette(kmeans.3$cluster, dissE)
sil4 <- silhouette(kmeans.4$cluster, dissE)
sil5 <- silhouette(kmeans.5$cluster, dissE)
sil6 <- silhouette(kmeans.6$cluster, dissE)
sil7 <- silhouette(kmeans.7$cluster, dissE)
sil8 <- silhouette(kmeans.8$cluster, dissE)
sil9 <- silhouette(kmeans.9$cluster, dissE)
sil10 <- silhouette(kmeans.10$cluster, dissE)
kmean.sil.values <- c(
summary(sil2)[["avg.width"]]
,summary(sil3)[["avg.width"]]
,summary(sil4)[["avg.width"]]
,summary(sil5)[["avg.width"]]
,summary(sil6)[["avg.width"]]
,summary(sil7)[["avg.width"]]
,summary(sil8)[["avg.width"]]
,summary(sil9)[["avg.width"]]
,summary(sil10)[["avg.width"]])
lines(2:10,hclust.sil.values[2:10],type="o",col="green",pch=1,xlab="",ylab="")
lines(2:10,hclust.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
lines(2:10,kmean.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
lines(2:10,kmean.sil.values[2:10],type="o",col="green",pch=1,xlab="",ylab="")
pam.2 <- pam(dist(m3),k=2,diss = F)
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/newsCluster.R')
pam.2 <- pam(dist(m3),k=2,diss = T)
pam.3 <- pam(dist(m3),k=3,diss = T)
pam.4 <- pam(dist(m3),k=4,diss = T)
pam.5 <- pam(dist(m3),k=5,diss = T)
pam.6 <- pam(dist(m3),k=6,diss = T)
pam.7 <- pam(dist(m3),k=7,diss = T)
pam.8 <- pam(dist(m3),k=8,diss = T)
pam.9 <- pam(dist(m3),k=9,diss = T)
pam.10 <- pam(dist(m3),k=10,diss = T)
sil2 <- silhouette(pam.2)
sil3 <- silhouette(pam.3)
sil4 <- silhouette(pam.4)
sil5 <- silhouette(pam.5)
sil6 <- silhouette(pam.6)
sil7 <- silhouette(pam.7)
sil8 <- silhouette(pam.8)
sil9 <- silhouette(pam.9)
sil10 <- silhouette(pam.10)
pam.sil.values <- c(
summary(sil2)[["avg.width"]]
,summary(sil3)[["avg.width"]]
,summary(sil4)[["avg.width"]]
,summary(sil5)[["avg.width"]]
,summary(sil6)[["avg.width"]]
,summary(sil7)[["avg.width"]]
,summary(sil8)[["avg.width"]]
,summary(sil9)[["avg.width"]]
,summary(sil10)[["avg.width"]])
plot(2:10,pam.sil.values[2:10],type="o",col="blue",pch=0,ylim=c(-0.05,0.05),xlab="Number of clusters",ylab="Silhouette")
plot(2:10,pam.sil.values[2:10],type="o",col="blue",pch=0,ylim=c(-0.05,1),xlab="Number of clusters",ylab="Silhouette")
lines(2:10,hclust.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
lines(2:10,kmeans.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
lines(2:10,kmean.sil.values[2:10],type="o",col="red",pch=1,xlab="",ylab="")
lines(2:10,kmean.sil.values[2:10],type="o",col="green",pch=1,xlab="",ylab="")
hclust.2 <- cutree(hierarchical.clustering,k=2)
plot(hclust.2)
