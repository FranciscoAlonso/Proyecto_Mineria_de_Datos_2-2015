pnorm(z*0.04/sqrt(n) , mean = 0.01, sd = 0.04/sqrt(n), lower.tail = F)
n <- 160
pnorm(z*0.04/sqrt(n) , mean = 0.01, sd = 0.04/sqrt(n), lower.tail = F)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
?pt
pt(0, 15)
fit <- lm(y~x)
summary()
summary(fit)
data("mtcars")
fit <- lm(mtcars$mpg~mtcars$wt)
summary(fit)
predict(fit)
length(mtcars$mpg)
predict(fit, level = .95)
predict(fit, newdata = c(mean(mtcars$wt)))
?predict
predict(fit, newdata = data.frame(mean = c(mean(mtcars$wt))))
mean <- data.frame(mean = c(mean(mtcars$wt)))
mean
predict(fit, newdata = mean)
summary(fit)
predict(fit, newdata = mean)
data("mtcars")
lm(mtcars$mpg~mtcars$wt)
?predict
help(predict.lm)
fit <- lm(mtcars$mpg~mtcars$wt)
predict.lm(fit, data.frame(mean = mean(mtcars$wt)), interval = "confidence")
predict.lm(fit, data.frame(mean = mean(c(mtcars$wt))), interval = "confidence")
mean = mean(c(mtcars$wt))
predict.lm(fit, data.frame(mean = c(mean((mtcars$wt))), interval = "confidence")
WTmean = data.frame(m = mean(mtcars$wt))
WTmean
predict.lm(fit, WTmean, interval = "confidence")
predict.lm(fit.lm, WTmean, interval = "confidence")
predict.lm(fit, WTmean, interval = "confidence")
predict.lm(fit, WTmean, interval="confidence")
predict.lm(fit, newdata = WTmean, interval="confidence")
predict.lm(fit, newdata = WTmean, interval="confidence")
> attach(faithful)     # attach the data frame
> eruption.lm = lm(eruptions ~ waiting)
attach(faithful)     # attach the data frame
eruption.lm = lm(eruptions ~ waiting)
newdata = data.frame(waiting=80)
predict(eruption.lm, newdata, interval="confidence")
mean(mtcars$wt)
WTmean = data.frame(m = mean(mtcars$wt))
predict.lm(fit, newdata = WTmean, interval="confidence")
WTmean = data.frame(wt = mean(mtcars$wt))
predict.lm(fit, newdata = WTmean, interval="confidence")
WTmean = data.frame(wt = mean(mtcars$wt))
predict.lm(fit, newdata = WTmean, interval="confidence")
a <- mtcars$mpg
x <- mtcars$wt
fitCar<-lm(a ~ x)
predict(fitCar,data.frame(x=mean(x)), interval="confidence")
?mtcars
summary(predict(fitCar,data.frame(x=mean(x)), interval="confidence"))
summary(predict(fitCar,data.frame(x=3000, interval="confidence"))
predict(fitCar,data.frame(x=3000, interval="confidence")
predict(fitCar,data.frame(x=3000, interval="confidence")
predict(fitCar,data.frame(x=3000), interval="confidence")
mean(x)
predict(fitCar,data.frame(x=3), interval="confidence")
sumCoef <- summary(fitCar)$coefficients
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fitCar$df) * sumCoef[2, 2]) / 1000
(sumCoef[2,1] + c(-1, 1) * qnorm(.975, df = fitCar$df) * sumCoef[2, 2]) / 1000
(sumCoef[2,1] + c(-1, 1) * qt(.95, df = fitCar$df) * sumCoef[2, 2]) / 1000
(sumCoef[2,1] + c(-1, 1) * qt(.95, df = fitCar$df) * sumCoef[2, 2])
View(mtcars)
predict(fitCar,data.frame(x=3000), interval="confidence")
predict(fitCar,data.frame(x=3000), interval="confidence") / 1000
predict(fitCar,data.frame(x=mean), interval="confidence") / 1000
predict(fitCar,data.frame(x=mean), interval="confidence")
predict(fitCar,data.frame(x=3.0), interval="confidence")
predict(fitCar,data.frame(x=3.0), interval= "prediction")
predict(fitCar,data.frame(x=2.0), interval= "prediction")
predict(fitCar,data.frame(x=2.0), interval="confidence")
predict(fitCar,data.frame(x=2.0), interval="confidence")
predict(fitCar,data.frame(x=2.0), interval="none")
predict(fitCar,data.frame(x=2.0), interval="confidence")
predict(fitCar,data.frame(x=2000), interval="confidence")
predict(fitCar,data.frame(x=2000), interval="confidence")/1000
predict(fitCar,data.frame(x=2.0), interval="confidence")
data(mtcars)
data("mtcars")
data("mtcars")
data("mtcars")
mtcars
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
mpgMean <- mean(mtcars$mpg)
wtMean <- mean(mtcars$wt)
wtMean <- data.frame(x = mean(mtcars$wt))
predict(fit, wtMean, interval = "confidence")
predict(fit, wtMean, interval = "prediction")
predict(fit, data.frame(x = 3), interval = "prediction")
predict(fit, data.frame(x = 2), interval = "prediction")
predict(fit, data.frame(x = 2), interval = "prediction")
predict(fit, data.frame(x = 2), interval = "confidence")
predict(fit, data.frame(x = 2), interval = "prediction")
predict(fit, data.frame(x = 2000), interval = "prediction")
predict(fit, data.frame(x = 2000), interval = "prediction") / 1000
predict(fit, data.frame(x = 2000), interval = "prediction") / 100
predict(fit, data.frame(x = 2000), interval = "prediction") / 1000
predict(fit, data.frame(x = 2.0), interval = "prediction")
fitted <- predict(fit)
sum((y - fitted)^2)
dif <- y - fitted
dif <- (y - fitted)^2
fit2 <- lm(y~1+x)
fitted2 <- predict(fit2)
dif2 <- (y - fitted2)^2
sum(dif) - sum(dif2)
anova(fit,fit2)
dif3 <- (y - mean(y))^2
sum(dif3)
sum(dif) / sum(dif2)
sum(dif) / sum(dif3)
summary(fit)
install.packages("GGally")
data(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$cyl + mtcars$wt)
summary(fit)
fit <- lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt)
summary(fit)
fit <- lm(mtcars$mpg ~ as.factor(mtcars$cyl) + mtcars$wt)
summary(fit)
mtcars$cyl
data("mtcars")
plot(mtcars$mpg)
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 20)
hist(mtcars$mpg, breaks = 10)
hist(mtcars$mpg, breaks = 10, x = 1:40)
hist(mtcars$mpg, breaks = 10, x = c(1:40))
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 15)
x <- c(0:40)
hist(mtcars$mpg, breaks = 15, x = x)
boxplot(mtcars$mpg ~ mtcars$am)
library(ggplot2)
g <- ggplot(data = dat, aes(x = means))
g <- g + geom_histogram(alpha = .20, binwidth=.2, colour = "black", aes(y = ..density..))
print(g)
?mtcars
mtcars
summary(lm(mtcars$mpg ~ mtcars$am))
summary(lm(mtcars$mpg ~ factor(mtcars$am)))
m <- filter(mtcars, am == 1)
library(dplyr)
m <- filter(mtcars, am == 1)
mean(m$mpg)
a <- filter(mtcars, am == 0)
mean(a$mpg)
?ancova
allfit <- lm(mtcars$mpg ~ .)
allfit <- lm(mtcars$mpg ~ ., data = mtcars)
summary(allfit)
summary(lm(mtcars$mpg ~ factor(mtcars$am)))
fit1 <- lm(mtcars$mpg ~ factor(mtcars$am))
anova(fit1, allfit)
mean(m$mpg) - mean(a$mpg)
summary(fit1 <- lm(mtcars$mpg ~ factor(mtcars$am)))
summary(fit1 <- lm(mtcars$mpg ~ factor(mtcars$am) - 1))
cor(mtcars$mpg, mtcars$am)
cor(mtcars$mpg, mtcars$am)^2
cor(mtcars)
cor(mtcars)
cor(mtcars)^2
cor(mtcars)^2 > 0.36
cor(mtcars)^2[cor(mtcars)^2 > 0.36]
cor(mtcars)^2[cor(mtcars)^2 > 0.36,]
cor(mtcars)^2[,cor(mtcars)^2 > 0.36]
cor(mtcars)^2[cor(mtcars)^2 > 0.36]
cor(mtcars)^2 > 0.36
cor(mtcars)^2
cor(mtcars)
cor(mtcars)^2
bestFit <- lm(mtcar)
bestFit <- lm(mpg ~ factor(am) + wt, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + wt + disp, data = mtcars)
summary(bestFit)
cors <- cor(mtcars)^2
cors["mpg"]
cors[mpg]
cors[1]
cors[,1]
cors[1,]
bestFit <- lm(mpg ~ factor(am) + wt + hp, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + wt + hp + disp, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + wt + hp + cyl, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + wt + hp + disp + cyl, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + wt + hp, data = mtcars)
summary(bestFit)
cors[,1]
bestFit <- lm(mpg ~ factor(am) + wt + hp + cyl, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + wt, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + qsec, data = mtcars)
summary(bestFit)
cors[1,]
bestFit <- lm(mpg ~ factor(am) + qsec + gear, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + qsec + carb, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + carb, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + vs, data = mtcars)
summary(bestFit)
cors[1,]
bestFit <- lm(mpg ~ factor(am) + drat, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + hp, data = mtcars)
summary(bestFit)
bestFit <- lm(mpg ~ factor(am) + wt, data = mtcars)
summary(bestFit)
cors[1,]
cors <- cor(mtcars)
cors[1,]
cors[1,]^2
cors[2,]^2
cors[3,]^2
cors[6,]^2
fitMLR2 <- lm(mpg ~ as.factor(am) + wt + hp, data = mtcars)
summary(fitMLR2)
library(MASS)
data("shuttle")
?shuttle
fit <- glm(shuttle$use ~ shuttle$wind, family = binomial)
summary(fit)
head(shuttle)
fit <- glm(shuttle$use ~ shuttle$wind, family = binomial)
tail(shuttle)
exp(fit$coefficients)
fit <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family = binomial)
summary(fit)
exp(fit$coefficients)
fit <- glm(shuttle$use ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm(1-shuttle$use ~ shuttle$wind, family = binomial)
?I
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-(shuttle$use+1)) ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-na.omit(shuttle$use)) ~ shuttle$wind, family = binomial)
fit2 <- glm(I(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm(as.numeric(1-shuttle$use) ~ shuttle$wind, family = binomial)
fit2 <- glm((1-as.numeric(shuttle$use)) ~ shuttle$wind, family = binomial)
data("InsectSprays")
fit <- glm(InsectSprays$count ~ InsectSprays$spray, family = poisson)
exp(fit$coefficients)
fit$coefficients
fit1<- glm(1-use.binary~wind-1,data=shuttle,family=binomial)
summary(fit1)$coef
fit <- glm(InsectSprays$count ~ factor(InsectSprays$spray), family = poisson)
summary(fit)
exp(fit$coefficients)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x = x, y = y)
y2 <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
summary(lm(y2~x))
x2 <- 0:5
summary(lm(y2~x))
summary(lm(y2~x2))
y <- rpois(10, 10)
y
x <- seq(0:1, 10)
x <- seq(0,1, length = 10)
x
?seq
x <- seq(0,1, length = 10, by = 1)
x <- sample(0:1, 10, replace = T)
x
t <- log(10)
t2 <- log(10) + t
glm1 <- glm(y ~ x + offset(t), family = poisson)
time <- seq(1, 10)
time
glm1 <- glm(y ~ x + offset(log(time)), family = poisson)
summary(glm1)
glm2 <- glm(y ~ x + offset(log(10)+log(time)), family = poisson)
summary(glm2)
library(swirl)
swirl()
install_from_swirl("Regression Models")
library(swirl)
swirl()
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case, list = FALSE)
set.seed(125)
training <- <- segmentationOriginal[inTrain,]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(segmentationOriginal~., data = training, method = "rpart")
head(training)
names(training)
modFit <- train(Case~., data = training, method = "rpart")
pred <- predict(modFit,testing)
training[1,]
test1 <- training[1,]
test1 <- data.frame(training[1,])
test1
test1[1,] <- 0
test1
test1$TotalIntenCh2[1,] <- 23000
test1$TotalIntenCh2[1] <- 23000
test1$FiberWidthCh1[1] <- 10
test1$PerimStatusCh1[1] <- 2
predict(modFit, test1)
pred1 <- predict(modFit, test1)
pred1
modFit <- train(Class~., data = training, method = "rpart")
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
pred1 <- predict(modFit, test1)
pred1
pred2 <- pred1
test1$TotalIntenCh2[1] <- 50000
test1$FiberWidthCh1[1] <- 10
test1$VarIntenCh4 [1] <- 100
test1$PerimStatusCh1[1] <- 0
pred1 <- predict(modFit, test1)
pred1
test1$TotalIntenCh2[1] <- 57000
test1$VarIntenCh4 [1] <- 100
test1$PerimStatusCh1[1] <- 2
test1$FiberWidthCh1[1] <- 8
test1$TotalIntenCh2[1] <- 0
pred1 <- predict(modFit, test1)
pred1
test1[1,] <- 0
test2 <- test1
test3 <- test1
test4 <- test1
test5 <- test1
test2$TotalIntenCh2[1,] <- 23000
test2$TotalIntenCh2[1] <- 23000
test2$FiberWidthCh1[1] <- 10
test2$PerimStatusCh1[1] <- 2
predict(modFit, test2)
41-10^3
41*10^3
library(pgmm)
data(olive)
olive = olive[,-1]
clasTree <- train(Area ~., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(clasTree, newdata = newdata)
clasTree
fancyRpartPlot(clasTree$finalModel)
newdata
head(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd ~., method = "glm", family = "binomial", data = SAheart)
model <- train(chd ~chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = SAheart)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = SAheart)
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
model <- train(y ~ ., method = "rf", prox=TRUE)
model <- train(y ~ ., method = "rf", prox=TRUE, data = vowel.train)
?varImp
varImp(model)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("shiny")
install.packages("shiny")
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install_github('rCharts')
install.packages("rCharts")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
?uninstall
remove.packages("RCurl")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install.packages("devtools")
install.packages("Rcpp")
install_github('ramnathv/rCharts')
install.packages("RCurl")
install.packages("RCurl")
remove.packages(RCurl)
remove.packages("RCurl")
remove.packages("RCurl")
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
install.packages("downloader")
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
deps = c('RCurl', 'RJSONIO', 'whisker', 'yaml')
for (dep in deps){
install.packages(dep)
}
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
ftype(mean)
library(pryr)
install.packages("pryr")
ftype(mean)
library(pryr)
ftype(mean)
ftype(show)
ftype(predict)
ftype(colSums)
ftype(dgamma)
ftype(lm)
library(shiny)
runExample("01_hello")
source('E:/FAAS/AI/Data_Mining/DATA_Science_ESP/Playground/ui.R')
shinyServer()
setwd('E:/FAAS/AI/Data_Mining/DATA_Science_ESP/Playground/testApp')
runApp("testApp")
setwd('E:/FAAS/AI/Data_Mining/DATA_Science_ESP/Playground')
runApp("testApp")
runApp("testApp")
runApp("testApp")
devtools::install_github('rstudio/shinyapps')
install.packages("digest")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='francisco-alonso',
token='782554EFE63E5405993B9E6EA37D643A',
secret='<SECRET>')
shinyapps::setAccountInfo(name='francisco-alonso',
token='782554EFE63E5405993B9E6EA37D643A',
secret='IJqmRS99xXKSVcxrLydI7GjXpsOcHNQknut5BAZp')
library(shinyapps)
source('E:/FAAS/COMPUTACION POSTGRADO/Semestre_1/MD/tarea/app/ui.R')
shinyapps::deployApp('E:/FAAS/COMPUTACION POSTGRADO/Semestre_1/MD/tarea/app')
shinyapps::deployApp('E:/FAAS/COMPUTACION POSTGRADO/Semestre_1/MD/tarea/app')
shinyapps::deployApp('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/tarea/app')
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/byUserFriendList.R')
setwd('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015')
install.packages(topicmodels)
install.packages("topicmodels")
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/byUserFriendList.R')
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/byUserFriendList.R')
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/byUserFriendList.R')
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/byUserFriendList.R')
byUserFriendList()
source('E:/FAAS/COMPUTACION_POSTGRADO/Semestre_1/MD/Project/Proyecto_Mineria_de_Datos_2-2015/byUserFriendList.R')
byUserFriendList()
